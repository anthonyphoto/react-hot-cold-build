{"version":3,"sources":["sec-status.js","sec-form.js","sec-count.js","sec-hist.js","sec-top-msg.js","game-main.js","serviceWorker.js","index.js"],"names":["SecStatus","props","react_default","a","createElement","className","status","SecForm","e","preventDefault","this","onSubmit","numInput","value","parseInt","_this","hide","handleSubmit","type","placeholder","min","max","ref","r","React","Component","SecCount","count","SecHist","histHtml","hist","map","num","index","key","SecTopMsg","href","onClick","GameMain","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","arrHist","answer","Math","floor","random","console","log","state","newInput","find","window","alert","concat","setState","push","diff","abs","_this2","restartGame","title","sec_form_SecForm","Boolean","location","hostname","match","ReactDOM","render","game_main_GameMain","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.909c79e5.chunk.js","sourcesContent":["import React from 'react';\nimport './sec-status.css';\n\nexport default function SecStatus(props){\n    return (\n        <div className='status-box'>{props.status}</div>\n\n    );\n}","import React from 'react';\nimport './sec-form.css';\n\nexport default class SecForm extends React.Component {\n    // constructor(props){\n    //     super(props);\n        // this.numInput = React.createRef();\n    // }\n    \n    handleSubmit(e){\n        e.preventDefault();\n        if (this.props.onSubmit && this.numInput.value) {\n            // console.log(1, this.numInput);\n            // console.log(2, this.numInput.value);\n\n            this.props.onSubmit(parseInt(this.numInput.value));\n            this.numInput.value = '';\n\n        }\n    }\n\n\n    render() {\n        if (this.props.hide) return \"\";\n        return (\n        <div>\n            <form className='form-box' onSubmit={e=>this.handleSubmit(e)}>\n                <input type='number' placeholder='Enter your guess' \n                    min={this.props.min} max={this.props.max} ref={r=>this.numInput = r}\n                     />\n                <button type='submit'>Guess</button>\n            </form>\n        </div>\n\n        );\n    }\n}\n\n\n\n","import React from 'react';\nimport './sec-count.css';\n\nexport default function SecCount(props){\n    return (\n        <div className='count-box'>Guess #<span>{props.count}</span>!</div>\n\n    );\n}","import React from 'react';\nimport './sec-hist.css';\n\nexport default function SecHist(props){\n    const histHtml = props.hist.map((num, index) => (<div key={index} className='num-box'>{num}</div>));\n\n    return (\n        <div className='hist-box'>\n            {histHtml}\n        </div>\n\n    );\n}","import React from 'react';\nimport './sec-top-msg.css';\n\nexport default function SecTopMsg(props){\n    return (\n        <div className='game-top'>\n         <a href=\"\" onClick={e=>props.onClick(e)}>+New Game</a>\n        </div>\n\n    );\n}","import React from 'react';\nimport './game-main.css';\nimport SecStatus from './sec-status';\nimport SecForm from './sec-form';\nimport SecCount from './sec-count';\nimport SecHist from './sec-hist';\nimport SecTopMsg from './sec-top-msg';\n\nexport default class GameMain extends React.Component {\n  constructor (props){\n    super(props);\n    this.hide = false;\n    this.arrHist = [];  // history of input\n    this.answer = Math.floor(Math.random()*100);   \n    console.log(\"Answer\", this.answer);\n    this.status = \"Make your guess!\";\n    this.count = 0; // # of tries\n\n    this.state = {\n        newInput: ''\n    }\n\n  }\n\n  handleSubmit(num){\n    if (this.arrHist.find(a=> a===num)){\n        window.alert(`You already entered ${num}`);\n        return;\n    }\n\n    // console.log('here', typeof num, typeof this.answer);\n    this.setState({\n        newInput: num\n    });\n    this.arrHist.push(num);\n    this.count++;\n\n    if (num === this.answer){\n        // console.log('here');\n        this.status = \"You got the answer!!!\";\n        this.hide = true;\n    } else {\n        const diff = Math.abs(num - this.answer);\n        this.status = (diff <= 10)? \"Hot\" : \n                      (diff <= 20)? \"Warm\" :\n                      (diff <= 30)? \"Luke Warm\" : \"Cold\";\n    }\n  }\n\n  restartGame(e) {\n      e.preventDefault();\n      this.answer=70;\n      this.status = \"Make your guest!\";\n      this.count = 0;\n      this.setState({ newInput: '' });\n      this.arrHist = [];\n      this.hide = false;\n    //   console.log('test');\n  }\n\n  render(){\n\n      return (\n        <div>\n            <div>\n                <SecTopMsg onClick={e=>this.restartGame(e)} />\n            </div>\n            <div className='game-title'>\n                <h1>{this.props.title}</h1>\n            </div>\n            <div className='game-body bd'>\n                <SecStatus status={this.status} />\n                <SecForm max={100} min={1} hide={this.hide} onSubmit={num=>this.handleSubmit(num)} />\n                <SecCount count={this.count} />\n                <SecHist hist={this.arrHist} />\n            </div>\n        </div>\n      );\n  }\n\n}\n\n\n// if (this.status !== 'You got the answer!!!'){\n//     console.log('test')\n// }\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameMain from './game-main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GameMain title='HOT or COLD' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}